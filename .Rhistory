x[2]<-Y[i]
while (t<n){
i<-x[t]
U<-runif(1)
for (j in 1:dim(p)[1]) {#Generate Y
if (U<= p[i,1]){
Y[i] <- 1
}else if( sum(p[i,1:j-1])<U && U<= sum(p[i,1:j])) {
Y[i]=j
}
}
t=t+1
x[t]<-Y[i]
}#End while
#print(x)
return(prop.table(table(as.matrix(x))))
#print(count)
}#End function
#p=matrix(c(0.3, 0.5, 0.7, 0.5), nrow=2, ncol=2, byrow=FALSE)
p=matrix(c(.2,.3,0,0,0,.4, .7,0,.5,0,0,0, 0,.7,0,0,0,0, 0,0,.5,.9,.25,0, 0,0,0,.1,.5,.4, .1,0,0,0,.25,.2), nrow = 6, ncol = 6, byrow = FALSE)
print(p)
MarkovChain(p,3,10000)
p=matrix(c(.2,.3,0,0,0,.4, .7,0,.5,0,0,0, 0,.7,0,0,0,0, 0,0,.5,.9,.25,0, 0,0,0,.1,.5,.4, .1,0,0,0,.25,.2), nrow = 6, ncol = 6, byrow = FALSE)
print(p)
MarkovChain(p,3,10000)
print(p)
library(ExamST516)
library(ExamST516)
library(ExamST516)
#' @export
#' @export
#' @title Markov Chain
#' @usage MarkovChain(p,k,n)
#' @keywords Markov
#' @description This function simulates the stationary distribution of a Markov Chain.
#' @return Returns a table of the stationary probabilities of each state.
#' @param p Transition probability matrix
#' @param k integer indicating the initial state of the chain
#' @param n number of simulated steps
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
MarkovChain <- function(p,k,n){
set.seed(12)
x <- 0
Y<- 0
i<-k
x[1]<-i
t <- 1
U <- runif(1)
for (j in 1:dim(p)[1]) {
if (U<= p[i,1]){
Y[i] <- 1
}else if( sum(p[i,1:j-1])<U && U<= sum(p[i,1:j])) {
Y[i]=j
}
}
x[2]<-Y[i]
while (t<n){
i<-x[t]
U<-runif(1)
for (j in 1:dim(p)[1]) {#Generate Y
if (U<= p[i,1]){
Y[i] <- 1
}else if( sum(p[i,1:j-1])<U && U<= sum(p[i,1:j])) {
Y[i]=j
}
}
t=t+1
x[t]<-Y[i]
}#End while
return(prop.table(table(as.matrix(x))))
}#End function
MarkovChain <- function(p,k,n){
set.seed(12)
x <- 0
Y<- 0
i<-k
x[1]<-i
t <- 1
U <- runif(1)
#p=matrix(c(0.3, 0.5, 0, 0.5), nrow=2, ncol=2, byrow=FALSE)
for (j in 1:dim(p)[1]) {
if (U<= p[i,1]){
Y[i] <- 1
}else if( sum(p[i,1:j-1])<U && U<= sum(p[i,1:j])) {
Y[i]=j
}
}
x[2]<-Y[i]
while (t<n){
i<-x[t]
U<-runif(1)
for (j in 1:dim(p)[1]) {#Generate Y
if (U<= p[i,1]){
Y[i] <- 1
}else if( sum(p[i,1:j-1])<U && U<= sum(p[i,1:j])) {
Y[i]=j
}
}
t=t+1
x[t]<-Y[i]
}#End while
#print(x)
return(prop.table(table(as.matrix(x))))
#print(count)
}#End function
p=matrix(c(.2,.3,0,0,0,.4, .7,0,.5,0,0,0, 0,.7,0,0,0,0, 0,0,.5,.9,.25,0, 0,0,0,.1,.5,.4, .1,0,0,0,.25,.2), nrow = 6, ncol = 6, byrow = FALSE)
print(p)
MarkovChain(p,3,10000)
x <- 1:12
dim(x)<-c(3,4)
x
dim(x)[1]
dim(x)[2]
?is.matrix
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
install_github("Katrinebch/ExamST516")
library(ExamST516)
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
#install_github("Katrinebch/ExamST516")
#library(ExamST516)
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
#install_github("Katrinebch/ExamST516")
#library(ExamST516)
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
#install.packages("devtools")
#install.packages("roxygen2")
#library(devtools)
install_github("Katrinebch/ExamST516")
library(ExamST516)
}else if {}
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
#install.packages("devtools")
#install.packages("roxygen2")
#library(devtools)
install_github("Katrinebch/ExamST516")
library(ExamST516)
install_git()
install.packages("install_git")
#install.packages("devtools")
#install.packages("roxygen2")
library(devtools)
#install_github("Katrinebch/ExamST516")
library(ExamST516)
detach("package:ExamST516", unload=TRUE)
library("ExamST516", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
R <- matrix(cbind(1, .3, 0, .3, 1, .7, 0, .7, 1), nrow = 3)
U <- t(chol(R))
nvars <- dim(U)[1]
numobs <- 1000
set.seed(13)
random.normal <- matrix(rnorm(nvars*numobs,0.1), nrow = nvars, ncol=numobs)
X <- U%*%random.normal
newX <- t(X)
cor(raw)
#makes the yz-correlation
plot(newX[,2],newX[,3], main = "YZ", xlab ="Y", ylab = "Z", col="pink")
abline(lm(newX[,2]~newX[,3]),col="magenta")
#makes the xz-correlation
plot(newX[,1],newX[,3], main = "XZ", xlab ="X", ylab = "Z", col="pink")
abline(lm(newX[,1]~newX[,3]),col="magenta")
#makes the xy-correlation
plot(newX[,1],newX[,2], main = "XY", xlab ="X", ylab = "Y", col="pink")
abline(lm(newX[,1]~newX[,2]), col="magenta")
MatrixRegression(newX[,1]~newX[,2]+newX[,3])
#' @export
#' @title Matrix Regression
#' @usage MatrixRegression(formula)
#' @keywords matrix regression
#' @description This function uses matrix regression to fit a simple or multiple
#'   linear regression model.
#' @return Returns a linear regression model
#' @param formula an object of class "formula": a symbolic description of the model to be fitted.
#' @author Katrine Eriksen and Katrine Bach \cr Department of mathematics and
#'   computer science (IMADA) \cr University of Southern Denmark \cr
#'   \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
MatrixRegression = function(formula){
call <- match.call()
matri <- match.call() #Use to make matrix and so the code can be run like the lm function
matri[[1L]] <- quote(stats::model.frame)
matri <- eval(matri, parent.frame())
#Dimension of matrix
widthmatri <- dim(matri)[2] #Width=p+1
heightmatri <- dim(matri)[1] #Height = n
Y <- matri[,1] # Setting Y up
X <- rep(1,heightmatri) #Start X with olumn of 1's.
for(i in 2:widthmatri){
X <- cbind(X,matri[,i]) # Add other variables to X.
}
# Returns residual standard error, R^2, R^2(adj), F statistics, degree of freedom, p value, Estimate, std. Error, t value and Pr.
Estimate = as.vector(solve(t(X)%*%X)%*%(t(X)%*%Y))
yhat = X%*%Estimate
ehat = as.vector(Y-X%*%Estimate)
RSS = sum((ehat)^2)
SST = sum((Y-mean(Y))^2)
SSreg = sum((yhat-mean(Y))^2)
R2=1-(RSS)/(SST)
df= heightmatri-widthmatri
Radj = 1- (RSS/(heightmatri-widthmatri))/(SST/(heightmatri-1))
Ftest = (SSreg/(widthmatri-1))/(RSS/(heightmatri-widthmatri))
pvalue = 1-pf(Ftest, heightmatri- widthmatri,widthmatri-1)
S2 = RSS/(heightmatri-widthmatri)
ResidualStandardError = sd(ehat)
StandardError = sqrt(diag(S2*solve(t(X)%*%X)))
Tvalue = Estimate/StandardError
Pr = 1-pt(Tvalue,df)
print(data.frame(Estimate, StandardError, Tvalue, Pr))
cat((sprintf("Residual standard error %.4f on %i degrees of freedom \n",ResidualStandardError, df)),
(sprintf("R-squared:%4f \n", R2 )),
(sprintf("Adjusted R-squared: %4f\n", Radj )),
(sprintf("F-statistics %2f with the cooresponding p value %4f\n", Ftest, pvalue )))
}#ends function
R <- matrix(cbind(1, .3, 0, .3, 1, .7, 0, .7, 1), nrow = 3)
U <- t(chol(R))
nvars <- dim(U)[1]
numobs <- 1000
set.seed(13)
random.normal <- matrix(rnorm(nvars*numobs,0.1), nrow = nvars, ncol=numobs)
X <- U%*%random.normal
newX <- t(X)
cor(raw)
#makes the yz-correlation
plot(newX[,2],newX[,3], main = "YZ", xlab ="Y", ylab = "Z", col="pink")
abline(lm(newX[,2]~newX[,3]),col="magenta")
#makes the xz-correlation
plot(newX[,1],newX[,3], main = "XZ", xlab ="X", ylab = "Z", col="pink")
abline(lm(newX[,1]~newX[,3]),col="magenta")
#makes the xy-correlation
plot(newX[,1],newX[,2], main = "XY", xlab ="X", ylab = "Y", col="pink")
abline(lm(newX[,1]~newX[,2]), col="magenta")
MatrixRegression(newX[,1]~newX[,2]+newX[,3])
R <- matrix(cbind(1, .3, 0.7, .3, 1, 0, 0.7, 0, 1), nrow = 3)
U <- t(chol(R))
nvars <- dim(U)[1]
numobs <- 1000
set.seed(13)
random.normal <- matrix(rnorm(nvars*numobs,0.1), nrow = nvars, ncol=numobs)
X <- U%*%random.normal
newX <- t(X)
cor(raw)
#makes the yz-correlation
plot(newX[,2],newX[,3], main = "YZ", xlab ="Y", ylab = "Z", col="pink")
abline(lm(newX[,2]~newX[,3]),col="magenta")
#makes the xz-correlation
plot(newX[,1],newX[,3], main = "XZ", xlab ="X", ylab = "Z", col="pink")
abline(lm(newX[,1]~newX[,3]),col="magenta")
#makes the xy-correlation
plot(newX[,1],newX[,2], main = "XY", xlab ="X", ylab = "Y", col="pink")
abline(lm(newX[,1]~newX[,2]), col="magenta")
MatrixRegression(newX[,1]~newX[,2]+newX[,3])
R <- matrix(cbind(1, .3, 0.7, .3, 1, 0, 0.7, 0, 1), nrow = 3)
U <- t(chol(R))
nvars <- dim(U)[1]
numobs <- 1000
set.seed(13)
random.normal <- matrix(rnorm(nvars*numobs,0.1), nrow = nvars, ncol=numobs)
X <- U%*%random.normal
newX <- t(X)
cor(raw)
#makes the yz-correlation
plot(newX[,2],newX[,3], main = "YZ", xlab ="Y", ylab = "Z", col="pink")
abline(lm(newX[,2]~newX[,3]),col="magenta")
#makes the xz-correlation
plot(newX[,1],newX[,3], main = "XZ", xlab ="X", ylab = "Z", col="pink")
abline(lm(newX[,1]~newX[,3]),col="magenta")
#makes the xy-correlation
plot(newX[,1],newX[,2], main = "XY", xlab ="X", ylab = "Y", col="pink")
abline(lm(newX[,1]~newX[,2]), col="magenta")
MatrixRegression(newX[,1]~newX[,2]+newX[,3])
R <- matrix(cbind(1, .3, 0.7, .3, 1, 0, 0.7, 0, 1), nrow = 3)
U <- t(chol(R))
nvars <- dim(U)[1]
numobs <- 1000
set.seed(13)
random.normal <- matrix(rnorm(nvars*numobs,0.1), nrow = nvars, ncol=numobs)
X <- U%*%random.normal
newX <- t(X)
cor(raw)
#makes the yz-correlation
plot(newX[,2],newX[,3], main = "YZ", xlab ="Y", ylab = "Z", col="pink")
abline(lm(newX[,2]~newX[,3]),col="magenta")
#makes the xz-correlation
plot(newX[,1],newX[,3], main = "XZ", xlab ="X", ylab = "Z", col="pink")
abline(lm(newX[,1]~newX[,3]),col="magenta")
#makes the xy-correlation
plot(newX[,1],newX[,2], main = "XY", xlab ="X", ylab = "Y", col="pink")
abline(lm(newX[,1]~newX[,2]), col="magenta")
MatrixRegression(newX[,1]~newX[,2]+newX[,3])
library(ExamST516)
library(ExamST516)
densiplot(x,n=500, method="naive", from= min(x)-(sd(x)/3), to=max(x)+(sd(x)/3))
x=6
densiplot(x,n=500, method="naive", from= min(x)-(sd(x)/3), to=max(x)+(sd(x)/3))
library(ExamST516)
buffon(1000,1,1)
chi.probability(10,4,100)
library(ExamST516)
densi(faithful$eruptions)
library(ExamST516)
densi(faithful$eruptions)
density(faithful$eruptions)
library(ExamST516)
library(ExamST516)
densi(faithful$eruptions)
#' @export
#' @title Goodness of Fit
#' @usage GoodnessOfFit(x,p)
#' @keywords GOF. goodness-of-fit
#' @description This function perfomes chi-squared test and goodness-of-fit test.
#' @param x observed values
#' @param p the expected probability for all outcomes
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
GoodnessOfFit <- function(x,p=c(rep(1/length(x),length(x)))){
#Warning/stops
if(sum(p)!=1){stop("p must sum to 1 and be a vector of probabilities")}
if(any(p<0)){stop("you can't have a negative probability")}
if(length(x)!=length(p)){stop("x and p must have the same length")}
set.seed(13)
n<-301
Exp<-n*p
Pearson<-((x-Exp)^2/Exp)
GOF<-sum(Pearson,na.rm = FALSE)
options(digits = 10)
return(GOF)
}
#' @export
#' @title Goodness of Fit
#' @usage GoodnessOfFit(x,p)
#' @keywords GOF. goodness-of-fit
#' @description This function perfomes chi-squared test and goodness-of-fit test.
#' @param x observed values
#' @param p the expected probability for all outcomes
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
GoodnessOfFit <- function(x,p=c(rep(1/length(x),length(x)))){
#Warning/stops
if(sum(p)!=1){stop("p must sum to 1 and be a vector of probabilities")}
if(any(p<0)){stop("you can't have a negative probability")}
if(length(x)!=length(p)){stop("x and p must have the same length")}
set.seed(13)
n<-301
Exp<-n*p
Pearson<-((x-Exp)^2/Exp)
GOF<-sum(Pearson,na.rm = FALSE)
options(digits = 10)
return(GOF)
}
#' @export
#' @title Goodness of Fit
#' @usage GoodnessOfFit(x,p)
#' @keywords GOF. goodness-of-fit
#' @description This function perfomes chi-squared test and goodness-of-fit test.
#' @param x observed values
#' @param p the expected probability for all outcomes
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
GoodnessOfFit <- function(x,p=c(rep(1/length(x),length(x)))){
#Warning/stops
if(sum(p)!=1){stop("p must sum to 1 and be a vector of probabilities")}
if(any(p<0)){stop("you can't have a negative probability")}
if(length(x)!=length(p)){stop("x and p must have the same length")}
set.seed(13)
n<-301
Exp<-n*p
Pearson<-((x-Exp)^2/Exp)
GOF<-sum(Pearson,na.rm = FALSE)
options(digits = 10)
return(GOF)
}
URL <- "https://raw.githubusercontent.com/haghish/ST516/master/data/soccer.txt"
data <- read.table(URL, header = TRUE)
x<-data$Number
GOFit<-GoodnessOfFit(x)
chi.probability(GOFit,length(x)-1,1000)
#' @export
#' @title Goodness of Fit
#' @usage GoodnessOfFit(x,p)
#' @keywords GOF. goodness-of-fit
#' @description This function perfomes chi-squared test and goodness-of-fit test.
#' @param x observed values
#' @param p the expected probability for all outcomes
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
GoodnessOfFit <- function(x,p=c(rep(1/length(x),length(x)))){
#Warning/stops
if(sum(p)!=1){stop("p must sum to 1 and be a vector of probabilities")}
if(any(p<0)){stop("you can't have a negative probability")}
if(length(x)!=length(p)){stop("x and p must have the same length")}
set.seed(13)
n<-301
Exp<-n*p
Pearson<-((x-Exp)^2/Exp)
GOF<-sum(Pearson,na.rm = FALSE)
return(GOF)
}
URL <- "https://raw.githubusercontent.com/haghish/ST516/master/data/soccer.txt"
data <- read.table(URL, header = TRUE)
x<-data$Number
GOFit<-GoodnessOfFit(x)
chi.probability(GOFit,length(x)-1,1000)
options(digits = 10)
#' @export
#' @title Goodness of Fit
#' @usage GoodnessOfFit(x,p)
#' @keywords GOF. goodness-of-fit
#' @description This function perfomes chi-squared test and goodness-of-fit test.
#' @param x observed values
#' @param p the expected probability for all outcomes
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
GoodnessOfFit <- function(x,p=c(rep(1/length(x),length(x)))){
#Warning/stops
if(sum(p)!=1){stop("p must sum to 1 and be a vector of probabilities")}
if(any(p<0)){stop("you can't have a negative probability")}
if(length(x)!=length(p)){stop("x and p must have the same length")}
set.seed(13)
n<-301
Exp<-n*p
Pearson<-((x-Exp)^2/Exp)
GOF<-sum(Pearson,na.rm = FALSE)
return(GOF)
}
URL <- "https://raw.githubusercontent.com/haghish/ST516/master/data/soccer.txt"
data <- read.table(URL, header = TRUE)
x<-data$Number
GOFit<-GoodnessOfFit(x)
options(digits = 10)
chi.probability(GOFit,length(x)-1,1000)
#' @export
#' @title Goodness of Fit
#' @usage GoodnessOfFit(x,p)
#' @keywords GOF. goodness-of-fit
#' @description This function perfomes chi-squared test and goodness-of-fit test.
#' @param x observed values
#' @param p the expected probability for all outcomes
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
GoodnessOfFit <- function(x,p=c(rep(1/length(x),length(x)))){
#Warning/stops
if(sum(p)!=1){stop("p must sum to 1 and be a vector of probabilities")}
if(any(p<0)){stop("you can't have a negative probability")}
if(length(x)!=length(p)){stop("x and p must have the same length")}
set.seed(13)
n<-301
Exp<-n*p
Pearson<-((x-Exp)^2/Exp)
GOF<-sum(Pearson,na.rm = FALSE)
return(GOF)
}
URL <- "https://raw.githubusercontent.com/haghish/ST516/master/data/soccer.txt"
data <- read.table(URL, header = TRUE)
x<-data$Number
options(digits = 10)
GOFit<-GoodnessOfFit(x)
chi.probability(GOFit,length(x)-1,1000)
#' @export
#' @title Goodness of Fit
#' @usage GoodnessOfFit(x,p)
#' @keywords GOF. goodness-of-fit
#' @description This function perfomes chi-squared test and goodness-of-fit test.
#' @param x observed values
#' @param p the expected probability for all outcomes
#' @author Katrine Eriksen and Katrine Bach \cr
#' Department of mathematics and computer science (IMADA) \cr
#' University of Southern Denmark \cr
#' \email{kater13@student.sdu.dk} and \email{kabac13@student.sdu.dk}
GoodnessOfFit <- function(x,p=c(rep(1/length(x),length(x)))){
#Warning/stops
if(sum(p)!=1){stop("p must sum to 1 and be a vector of probabilities")}
if(any(p<0)){stop("you can't have a negative probability")}
if(length(x)!=length(p)){stop("x and p must have the same length")}
set.seed(13)
n<-301
Exp<-n*p
Pearson<-((x-Exp)^2/Exp)
GOF<-sum(Pearson,na.rm = FALSE)
return(GOF)
}
#Opgave 3
estpi <- 0
for (i in seq(1, 10000, 10)) {
estpi[i]<-buffon(i,1,1) #estimates pi by using our function buffon
}
plot(estpi)
library(ExamST516)
library(ExamST516)
library(ExamST516)
