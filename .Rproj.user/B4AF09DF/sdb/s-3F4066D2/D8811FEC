{
    "collab_server" : "",
    "contents" : "---\ntitle: \"ST516: Computational Sttistics Exam (Part B)\"\nauthor: \"Katrine Eriksen and Katrine Bach\"\ndate: \"2 juni 2016\"\noutput: pdf_document\n---\n\n#Task 4\n###Standard Normal Distribution:\n###Matrix regression:\n###Linear regression: \n###Residual standard error:\n###$R^2$:\n###$R_{adj}^2$:\n###F-Statistics:\n\n***\n\n#Task 5\n**Theory**\n##Standard Normal Density\n##Naive density estimation\nThe Naive kernel method uses each point of estimation $x$ as the center og the bin of width $2h$. \n### Kernel density estimation\nThe Kernel density estimation is an esppraoch that is rooted in the  histogram methodology. The basic idea is to estimate the density function at a point $x$ using neighboring observations. To express it more transparently, we consider the weight function \n$$55$$\nwhich is called the kernel weight. The kernel estimate of $f(x)$ is defined as\n$$55$$\n###Naive estimator:\n###Gaussian Kernel \n###Silverman's suggestion for Gaussian method: \n###Density:\n\nHere we apply our function densi that estimates the density using the naive estimator ot thre gaussian kernel. First we run it foe the Kernel density estimation without specifying $d$ or $h$.\n```{r}\ndensi <- function(x,d=NULL,h=NULL, method=\"naive\"){\nn<-length(x)\n\nif(length(h)==0){\n  if (method==\"kernel\"){\n    h <- 0.9*min(c(IQR(x)/1.34,sd(x)))*n^(-1/5)\n  }else{\n    h<- (max(x)-min(x))/(1+log2(n))\n  }\n  #Make warning with other methods\n}else{\n  h <- h\n}\n\nif(length(d)==0){\n  minimum<-densi(x,min(x),h,method)\n  maksimum<-densi(x,max(x),h, method)\n\n  quantile1<-quantile(x,names=FALSE)[2]\n  q1<-densi(x,quantile1,h,method)\n\n  quantile3<-quantile(x,names=FALSE)[4]\n  q3<-densi(x,quantile3,h,method)\n\n  medians <- densi(x,median(x),h,method)\n  means <- densi(x,mean(x),h,method)\n\n  smoke <- matrix(c(min(x),minimum,quantile1,q1,median(x),medians,mean(x),means,quantile3,q3,max(x),maksimum), ncol = 2, byrow = TRUE)\n  colnames(smoke) <- c(\"x\",\"y\")\n  rownames(smoke) <- c(\"Min\",\"1st Quantile\",\"Median\", \"Mean\", \"3dr Quantile\", \"Max\")\n  smoke <- as.table(smoke)\n  print(sprintf(\"bandwidth: %f\", h))\n  return(smoke)\n\n}else{\n  d=d\n}\n\nif(method==\"kernel\"){\n  kern<-0\n  for (i in 1:n) {\n    kern[i] <-(1/h)*dnorm((d-x[i])/h)\n  }\n  summ<- sum(kern)\n  f<-(1/n)*summ\n  return(f)\n}else{\n  nav <- 0\n  for(i in 1:n){\n    if(abs((d-x[i])/h)<1){\n      w <- 1/2\n  }else{\n      w <- 0\n  }\n    nav[i] <-(1/h)*w\n  }\n  summ <- sum(nav)\n  f <- (1/n)*summ\n  return(f)\n}\n\n}\ndensi(faithful$eruptions, method=\"kernel\")\n\n\n\n```\n\n**Forklar hvad værdierne viser**\n\nNow we run it again using the Naive density estimation and again without specifying $d$ and $h$. \n\n```{r}\ndensi(faithful$eruptions)\n\n```\n\n**Forklar noget om værdierne** \n\nNow we use our function densiplot, that calls our density function and creates a density plot based on the specified method. We start by showing the plot for the Kernel denisty estimation. \n```{r}\ndensiplot <- function(x,n=500, method=\"naive\", from= min(x)-(sd(x)/3), to=max(x)+(sd(x)/3)){\n  happy<-c()\n  for (d in seq(from,to,length.out = n)) {\n    happy1<-densi(x,d=d,method=method)\n    happy<-c(happy,happy1)\n  }\n  plot(happy)\n}\ndensiplot(faithful$eruptions, method=\"kernel\")\n\n```\n\nNow we run it again using the Naive density estimation and again without specifying $d$ and $h$. \n\n```{r}\ndensiplot(faithful$eruptions)\n\n```\n\n\nAnd now we want to se how our densiplot function looks againts the already build-in function *density()*\n\n```{r}\nplot(density(faithful$eruptions))\ndensity(faithful$eruptions)\n\n```\n\nHer kan man også sammenligne tabellen med hinanden. Husk at lav funktionsbeskrivelser til densi() og densiplot()!!!!\n\n***\n\n#Task 6\n###Markov chain:\n###Transition Probability:\n\n***\n\n#Task 7\n###Beta Distribution:\n###Metropolis-Hastings sampler: \n###Rejection rate: \n\n\n\n***\n",
    "created" : 1465217585366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3236022182",
    "id" : "D8811FEC",
    "lastKnownWriteTime" : 1465220346,
    "last_content_update" : 1465220346682,
    "path" : "~/Google Drev/ST505/ST516/ExamST516/R/Bobbelop.Rmd",
    "project_path" : "R/Bobbelop.Rmd",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}